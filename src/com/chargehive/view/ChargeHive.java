/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.chargehive.view;

import com.chargehive.model.Station;

import java.util.ArrayList;
import java.util.List;
import com.chargehive.controller.ValidationUtil;
import java.awt.Color;
import java.util.LinkedList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import com.chargehive.controller.SelectionSort;
import com.chargehive.controller.InsertionSort;
import com.chargehive.controller.MergeSort;
import com.chargehive.controller.BinarySearch;
/**
 *
 * @author Umanga Amatya
 */ 

public class ChargeHive extends javax.swing.JFrame {
    
    private List<Station> stationList;
    private JLabel idError = new JLabel();
    private JLabel nameError = new JLabel();
    private JLabel locationError = new JLabel();
    private JLabel availabilityError = new JLabel();
    private JLabel priceError = new JLabel();
    private JLabel portsError = new JLabel();
    private JLabel typeError = new JLabel();
    
    private java.awt.CardLayout cardLayout;
    /**
     * Creates new form ChargeHive
     */
    public ChargeHive() {
        initComponents();
        stationList = new ArrayList<>();

        // Add error labels to the admin panel
        adminTabPanel.add(idError);
        adminTabPanel.add(nameError);
        adminTabPanel.add(locationError);
        adminTabPanel.add(availabilityError);
        adminTabPanel.add(priceError);
        adminTabPanel.add(portsError);
        adminTabPanel.add(typeError);

        // Initialize error labels as invisible
        idError.setVisible(false);
        nameError.setVisible(false);
        locationError.setVisible(false);
        availabilityError.setVisible(false);
        priceError.setVisible(false);
        portsError.setVisible(false);
        typeError.setVisible(false);
        
        initializeData();
        initializeLayout(); // Set up CardLayout and add screens
        startProgress(); // Show loading screen and initiate progress  
    }
    
    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(loadingScreenPanel, "LoadingScreen");
        getContentPane().add(loginScreenPanel, "LoginScreen");
        getContentPane().add(mainScreenPanel, "MainScreen");

        // Start with the loading screen
        loadScreen("LoadingScreen");
    }
    
    private void initializeData() {
        stationList = new LinkedList<>();

        // Registering sample stations
        registerStation(new Station(100021, "BayCharge", "Pokhara", "Unavailable", 1500, 5, "Fast"));
        registerStation(new Station(100042, "EcoCharge", "Kathmandu", "Available", 2000, 4, "Slow"));
        registerStation(new Station(100013, "SwiftCharge", "Bhaktapur", "Unavailable", 1000, 2, "Fast"));
        registerStation(new Station(100094, "AmplifyCharge", "Chitwan", "Available", 4000, 2, "Fast"));
        registerStation(new Station(100065, "QuickCharge", "Dharan", "Available", 5000, 6, "Slow"));
}
    
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(30); // Simulated delay for progress bar
                    publish(i); // Publish progress
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                loadScreenProgress.setValue(progress);
            }

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute(); // Start the worker thread
    }
    
    private void registerStation(Station station) {
        stationList.add(station);
        DefaultTableModel model = (DefaultTableModel) stationTable.getModel();
        model.addRow(new Object[]{
            station.getId(), 
            station.getName(), 
            station.getLocation(),
            station.getAvailability(), 
            station.getPrice(), 
            station.getPorts(), 
            station.getType()
        });
    }
    
    
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginScreenPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();
        headingLabel = new javax.swing.JLabel();
        userTextField = new javax.swing.JTextField();
        loginBtn = new javax.swing.JButton();
        userLabel = new javax.swing.JLabel();
        pwdLabel = new javax.swing.JLabel();
        pwdPasswordField = new javax.swing.JPasswordField();
        loginErrorLabel = new javax.swing.JLabel();
        loginImageLabel = new javax.swing.JLabel();
        mainScreenPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        homeTabPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        redirectAdminButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        adminTabPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stationTable = new javax.swing.JTable();
        idTextField = new javax.swing.JTextField();
        nameTextField = new javax.swing.JTextField();
        locationTextField = new javax.swing.JTextField();
        availabilityTextField = new javax.swing.JTextField();
        portsTextField = new javax.swing.JTextField();
        priceTextField = new javax.swing.JTextField();
        typeTextField = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        selectionSortComboBox = new javax.swing.JComboBox<>();
        insertionSortComboBox = new javax.swing.JComboBox<>();
        mergeSortComboBox = new javax.swing.JComboBox<>();
        searchBarTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        aboutUsTabPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        topBarPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        loadingScreenPanel = new javax.swing.JPanel();
        loadScreenIcon = new javax.swing.JLabel();
        progLabel = new javax.swing.JLabel();
        loadScreenProgress = new javax.swing.JProgressBar();
        loadScreenLabel = new javax.swing.JLabel();

        loginScreenPanel.setBackground(new java.awt.Color(255, 255, 255));
        loginScreenPanel.setMaximumSize(new java.awt.Dimension(1362, 884));
        loginScreenPanel.setMinimumSize(new java.awt.Dimension(1362, 884));
        loginScreenPanel.setPreferredSize(new java.awt.Dimension(1362, 884));

        leftPanel.setBackground(new java.awt.Color(0, 153, 153));

        headingLabel.setFont(new java.awt.Font("Avenir", 0, 32)); // NOI18N
        headingLabel.setForeground(new java.awt.Color(255, 255, 255));
        headingLabel.setText("Welcome to ChargeHive!");

        userTextField.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        userTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        userTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTextFieldActionPerformed(evt);
            }
        });

        loginBtn.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        userLabel.setBackground(new java.awt.Color(255, 255, 255));
        userLabel.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        userLabel.setForeground(new java.awt.Color(255, 255, 255));
        userLabel.setText("Username");

        pwdLabel.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        pwdLabel.setForeground(new java.awt.Color(255, 255, 255));
        pwdLabel.setText("Password");

        pwdPasswordField.setText("jPasswordField1");

        loginErrorLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                .addContainerGap(172, Short.MAX_VALUE)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(loginBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(297, 297, 297))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(pwdPasswordField)
                            .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(userLabel)
                                .addComponent(pwdLabel)
                                .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(158, 158, 158))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loginErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headingLabel))
                        .addGap(171, 171, 171))))
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(headingLabel)
                .addGap(18, 18, 18)
                .addComponent(loginErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pwdLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pwdPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(loginBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        loginImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chargehive/resources/charging-station-in-nepal-scaled.jpg"))); // NOI18N

        javax.swing.GroupLayout loginScreenPanelLayout = new javax.swing.GroupLayout(loginScreenPanel);
        loginScreenPanel.setLayout(loginScreenPanelLayout);
        loginScreenPanelLayout.setHorizontalGroup(
            loginScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginScreenPanelLayout.createSequentialGroup()
                .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(loginImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );
        loginScreenPanelLayout.setVerticalGroup(
            loginScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leftPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(loginScreenPanelLayout.createSequentialGroup()
                .addGap(207, 207, 207)
                .addComponent(loginImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(307, Short.MAX_VALUE))
        );

        mainScreenPanel.setMaximumSize(new java.awt.Dimension(1362, 884));
        mainScreenPanel.setMinimumSize(new java.awt.Dimension(1362, 884));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N

        homeTabPanel.setBackground(new java.awt.Color(0, 153, 153));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chargehive/resources/AdobeStock_585977851.jpg"))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Avenir", 0, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Introducing ChargeHive!");

        redirectAdminButton.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        redirectAdminButton.setText("View available stations");
        redirectAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redirectAdminButtonActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(0, 153, 153));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Avenir", 0, 22)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jTextArea1.setText("Welcome to ChargeHive ⚡️, your trusted platform for locating, \nmanaging, and optimizing electric vehicle (EV) charging. \nWe are dedicated to fostering a greener future by making EV \ncharging more accessible, seamless, and efficient for drivers \neverywhere. \n\nChargeHive is an innovative platform designed to connect EV\nowners with the most convenient and reliable charging \nstations. Whether you’re planning a trip or looking for the \nnearest available charging port, ChargeHive is your one-stop \nsolution.\n\nOur goal is to provide a smart, intuitive, and user-friendly \nsystem that not only helps you find a charging station but also offers \ndetailed information such as availability, pricing, number of ports, \nand more.\n\n“चार्जहाइवमा आउनुहोस्, विद्युतीय यात्रा सजिलो बनाउनुहोस्!”");
        jTextArea1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout homeTabPanelLayout = new javax.swing.GroupLayout(homeTabPanel);
        homeTabPanel.setLayout(homeTabPanelLayout);
        homeTabPanelLayout.setHorizontalGroup(
            homeTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homeTabPanelLayout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(homeTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(homeTabPanelLayout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(redirectAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
            .addGroup(homeTabPanelLayout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        homeTabPanelLayout.setVerticalGroup(
            homeTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeTabPanelLayout.createSequentialGroup()
                .addGroup(homeTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homeTabPanelLayout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(redirectAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(homeTabPanelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Home", homeTabPanel);

        adminTabPanel.setBackground(new java.awt.Color(0, 153, 153));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        stationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Station ID", "Station Name", "Location", "Availability", "Price", "Ports", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(stationTable);

        idTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Station ID"));
        idTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextFieldActionPerformed(evt);
            }
        });

        nameTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Station Name"));
        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });

        locationTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Location"));
        locationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationTextFieldActionPerformed(evt);
            }
        });

        availabilityTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Availability"));
        availabilityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availabilityTextFieldActionPerformed(evt);
            }
        });

        portsTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Ports"));
        portsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portsTextFieldActionPerformed(evt);
            }
        });

        priceTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Price"));
        priceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTextFieldActionPerformed(evt);
            }
        });

        typeTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Type"));
        typeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeTextFieldActionPerformed(evt);
            }
        });

        updateButton.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        addButton.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        selectionSortComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort by ID", "Ascending", "Descending" }));
        selectionSortComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionSortComboBoxActionPerformed(evt);
            }
        });

        insertionSortComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort By Name", "Alphabetically", "Reverse Alphabetically" }));
        insertionSortComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertionSortComboBoxActionPerformed(evt);
            }
        });

        mergeSortComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort by Price", "Ascending", "Descending" }));
        mergeSortComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeSortComboBoxActionPerformed(evt);
            }
        });

        searchBarTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarTextFieldActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminTabPanelLayout = new javax.swing.GroupLayout(adminTabPanel);
        adminTabPanel.setLayout(adminTabPanelLayout);
        adminTabPanelLayout.setHorizontalGroup(
            adminTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminTabPanelLayout.createSequentialGroup()
                .addGroup(adminTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(adminTabPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchBarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(selectionSortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(insertionSortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(mergeSortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(adminTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(adminTabPanelLayout.createSequentialGroup()
                            .addGap(138, 138, 138)
                            .addGroup(adminTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(78, 78, 78)
                            .addGroup(adminTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(portsTextField)
                                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(100, 100, 100)
                            .addGroup(adminTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(typeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(115, 115, 115)
                            .addComponent(availabilityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(adminTabPanelLayout.createSequentialGroup()
                            .addGap(121, 121, 121)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1080, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(adminTabPanelLayout.createSequentialGroup()
                            .addGap(231, 231, 231)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(81, 81, 81)
                            .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(72, 72, 72)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(74, 74, 74)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        adminTabPanelLayout.setVerticalGroup(
            adminTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminTabPanelLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(adminTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectionSortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertionSortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mergeSortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(adminTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availabilityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(adminTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76)
                .addGroup(adminTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(106, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Admin Panel", adminTabPanel);

        aboutUsTabPanel.setBackground(new java.awt.Color(0, 153, 153));
        aboutUsTabPanel.setForeground(new java.awt.Color(0, 153, 153));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chargehive/resources/aboutt.png"))); // NOI18N

        jTextArea2.setBackground(new java.awt.Color(0, 153, 153));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Avenir", 0, 22)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea2.setRows(5);
        jTextArea2.setText("Namaste, and welcome to ChargeHive ⚡!\n\nWe’re here to make your EV journey smoother, whether you’re zipping \nthrough the streets of Kathmandu or exploring the beautiful hills and \nhighways of Nepal. As EV car owners ourselves, we understand the \nchallenges—like finding reliable charging stations and planning trips \nwithout worrying about running out of charge.\n\nThat’s why we created ChargeHive, a platform designed with Nepali \nEV drivers in \nmind. Our mission is to help you locate charging stations near you, \ncheck their availability in real-time, and ensure you’re always powered\nup—no matter where the road takes you.\n\nWith Nepal moving toward a greener and cleaner future, we’re excited \nto support EV owners in making eco-friendly choices that benefit not \njust you but also our environment. Let’s make sustainable travel easy \nand accessible, one charge at a time!");
        jScrollPane3.setViewportView(jTextArea2);

        jLabel6.setFont(new java.awt.Font("Avenir", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("About Us");

        javax.swing.GroupLayout aboutUsTabPanelLayout = new javax.swing.GroupLayout(aboutUsTabPanel);
        aboutUsTabPanel.setLayout(aboutUsTabPanelLayout);
        aboutUsTabPanelLayout.setHorizontalGroup(
            aboutUsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutUsTabPanelLayout.createSequentialGroup()
                .addGroup(aboutUsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(aboutUsTabPanelLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(aboutUsTabPanelLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        aboutUsTabPanelLayout.setVerticalGroup(
            aboutUsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutUsTabPanelLayout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutUsTabPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84))
        );

        jTabbedPane1.addTab("About Us", aboutUsTabPanel);

        topBarPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chargehive/resources/ChargeHive.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        logoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chargehive/resources/17367.png"))); // NOI18N
        logoutButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        jLabel2.setText("Log Out");

        javax.swing.GroupLayout topBarPanelLayout = new javax.swing.GroupLayout(topBarPanel);
        topBarPanel.setLayout(topBarPanelLayout);
        topBarPanelLayout.setHorizontalGroup(
            topBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topBarPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(topBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logoutButton)
                    .addComponent(jLabel2))
                .addGap(39, 39, 39))
        );
        topBarPanelLayout.setVerticalGroup(
            topBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(topBarPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainScreenPanelLayout = new javax.swing.GroupLayout(mainScreenPanel);
        mainScreenPanel.setLayout(mainScreenPanelLayout);
        mainScreenPanelLayout.setHorizontalGroup(
            mainScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addComponent(topBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mainScreenPanelLayout.setVerticalGroup(
            mainScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainScreenPanelLayout.createSequentialGroup()
                .addComponent(topBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loadingScreenPanel.setBackground(new java.awt.Color(0, 153, 153));
        loadingScreenPanel.setMaximumSize(new java.awt.Dimension(1362, 884));
        loadingScreenPanel.setMinimumSize(new java.awt.Dimension(1362, 884));
        loadingScreenPanel.setPreferredSize(new java.awt.Dimension(1362, 884));

        loadScreenIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chargehive/resources/9138046.png"))); // NOI18N

        progLabel.setBackground(new java.awt.Color(102, 102, 102));
        progLabel.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        progLabel.setForeground(new java.awt.Color(242, 242, 242));
        progLabel.setText("Preparing...");

        loadScreenProgress.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        loadScreenLabel.setBackground(new java.awt.Color(255, 255, 255));
        loadScreenLabel.setFont(new java.awt.Font("Avenir", 0, 40)); // NOI18N
        loadScreenLabel.setForeground(new java.awt.Color(255, 255, 255));
        loadScreenLabel.setText("ChargeHive");

        javax.swing.GroupLayout loadingScreenPanelLayout = new javax.swing.GroupLayout(loadingScreenPanel);
        loadingScreenPanel.setLayout(loadingScreenPanelLayout);
        loadingScreenPanelLayout.setHorizontalGroup(
            loadingScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadingScreenPanelLayout.createSequentialGroup()
                .addGroup(loadingScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loadingScreenPanelLayout.createSequentialGroup()
                        .addGap(562, 562, 562)
                        .addComponent(loadScreenLabel))
                    .addGroup(loadingScreenPanelLayout.createSequentialGroup()
                        .addGap(307, 307, 307)
                        .addGroup(loadingScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loadScreenProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(324, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loadingScreenPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(loadScreenIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(338, 338, 338))
        );
        loadingScreenPanelLayout.setVerticalGroup(
            loadingScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadingScreenPanelLayout.createSequentialGroup()
                .addContainerGap(136, Short.MAX_VALUE)
                .addComponent(loadScreenLabel)
                .addGap(43, 43, 43)
                .addComponent(loadScreenIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(loadScreenProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(progLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(137, 137, 137))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loadingScreenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loadingScreenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userTextFieldActionPerformed

    private void priceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceTextFieldActionPerformed

    private void portsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portsTextFieldActionPerformed

    private void availabilityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availabilityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availabilityTextFieldActionPerformed

    private void locationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locationTextFieldActionPerformed

    private void idTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTextFieldActionPerformed

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextFieldActionPerformed

    private void typeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeTextFieldActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
    String idText = idTextField.getText().trim();
    String name = nameTextField.getText().trim();
    String location = locationTextField.getText().trim();
    String availability = availabilityTextField.getText().trim();
    String priceText = priceTextField.getText().trim();
    String portsText = portsTextField.getText().trim();
    String type = typeTextField.getText().trim();

    setClear();

    try {
        if (!ValidationUtil.isIdInRange(idText)) {
            errorOrNormalField(idTextField, "Station ID", idError, "Station ID Not In Range", Color.red, rootPaneCheckingEnabled);
            return;
        } else if (!ValidationUtil.isNum(idText)) {
            errorOrNormalField(idTextField, "Station ID", idError, "Station ID Must Be a Number", Color.red, rootPaneCheckingEnabled);
            return;
        }

        if (!ValidationUtil.isNameValid(name)) {
            JOptionPane.showMessageDialog(null, "Name is invalid", "Invalid Name", JOptionPane.ERROR_MESSAGE);
            errorOrNormalField(nameTextField, "Station Name", nameError, "Enter Valid Station Name", Color.red, rootPaneCheckingEnabled);
            return;
        }

        if (!ValidationUtil.isLocationValid(location)) {
            JOptionPane.showMessageDialog(null, "Location is invalid", "Invalid Location", JOptionPane.ERROR_MESSAGE);
            errorOrNormalField(locationTextField, "Location", locationError, "Enter Valid Location", Color.red, rootPaneCheckingEnabled);
            return;
        }

        if (!ValidationUtil.isAvailabilityValid(availability)) {
            JOptionPane.showMessageDialog(null, "Availability is invalid", "Invalid Availability", JOptionPane.ERROR_MESSAGE);
            errorOrNormalField(availabilityTextField, "Availability", availabilityError, "Enter Valid Availability (e.g., Available/Unavailable)", Color.red, rootPaneCheckingEnabled);
            return;
        }

        if (!ValidationUtil.isPriceValid(priceText)) {
            JOptionPane.showMessageDialog(null, "Price is invalid", "Invalid Price", JOptionPane.ERROR_MESSAGE);
            errorOrNormalField(priceTextField, "Price", priceError, "Enter Valid Price", Color.red, rootPaneCheckingEnabled);
            return;
        } else if (!ValidationUtil.isNum(priceText)) {
            errorOrNormalField(priceTextField, "Price", priceError, "Price Must Be a Number", Color.red, rootPaneCheckingEnabled);
            return;
        }

        if (!ValidationUtil.isNum(portsText)) {
            JOptionPane.showMessageDialog(null, "Ports are invalid", "Invalid Ports", JOptionPane.ERROR_MESSAGE);
            errorOrNormalField(portsTextField, "Ports", portsError, "Ports Must Be a Number", Color.red, rootPaneCheckingEnabled);
            return;
        }

        if (!ValidationUtil.isTypeValid(type)) {
            JOptionPane.showMessageDialog(null, "Type is invalid", "Invalid Type", JOptionPane.ERROR_MESSAGE);
            errorOrNormalField(typeTextField, "Type", typeError, "Enter Valid Type", Color.red, rootPaneCheckingEnabled);
            return;
        }

        boolean found = false;
        for (Station station : stationList) {
            if (station.getId() == Integer.parseInt(idText)) {
                station.setName(name);
                station.setLocation(location);
                station.setAvailability(availability);
                station.setPrice(Float.parseFloat(priceText));
                station.setPorts(Integer.parseInt(portsText));
                station.setType(type);

                found = true;
                JOptionPane.showMessageDialog(null, "Station details updated successfully!", "Update Successful", JOptionPane.INFORMATION_MESSAGE);
                break;
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(null, "Station ID not found!", "Update Failed", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Refresh the table to show updated details
        loadListToTable(stationList);

    } catch (NumberFormatException e) {
        System.out.println("Invalid number format: " + e.getMessage());
        JOptionPane.showMessageDialog(null, "Invalid number format in fields!", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        String idTextToDelete = idTextField.getText().trim();

        setClear();

        try {
            if (!ValidationUtil.isIdInRange(idTextToDelete)) {
                errorOrNormalField(idTextField, "Station ID", idError, "Station ID Not In Range", Color.red, rootPaneCheckingEnabled);
                return;
            } else if (!ValidationUtil.isNum(idTextToDelete)) {
                errorOrNormalField(idTextField, "Station ID", idError, "Station ID Must Be a Number", Color.red, rootPaneCheckingEnabled);
                return;
            }

            boolean stationFound = false;

            for (Station station : stationList) {
                if (station.getId() == Integer.valueOf(idTextToDelete)) {
                    stationList.remove(station);
                    stationFound = true;
                    System.out.println("Station Deleted: " + station.getName() + "\n"
                            + "Station ID: " + station.getId() + "\n"
                            + "Location: " + station.getLocation() + "\n"
                            + "Availability: " + station.getAvailability() + "\n"
                            + "Price: " + station.getPrice() + "\n"
                            + "Ports: " + station.getPorts() + "\n"
                            + "Type: " + station.getType());
                    break; // Exit the loop once the station is found and removed
                }
            }

            if (!stationFound) {
                errorOrNormalField(idTextField, "Station ID", idError, "Station ID Not Found", Color.red, rootPaneCheckingEnabled);
                return;
            }

            loadListToTable(stationList);

      

    } catch (NumberFormatException e) {
        System.out.println("Invalid number format: " + e.getMessage());
    }
    }//GEN-LAST:event_deleteButtonActionPerformed


    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {
    idTextField.setText("");
    nameTextField.setText("");
    locationTextField.setText("");
    availabilityTextField.setText("");
    priceTextField.setText("");
    portsTextField.setText("");
    typeTextField.setText("");
    setClear();
}


    private void setClear() {
    // Reset borders to default
    idTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Station ID"));
    nameTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Station Name"));
    locationTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Location"));
    availabilityTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Availability"));
    priceTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Price"));
    portsTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Ports"));
    typeTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Type"));
    
    // Hide all error labels
    idError.setVisible(false);
    nameError.setVisible(false);
    locationError.setVisible(false);
    availabilityError.setVisible(false);
    priceError.setVisible(false);
    portsError.setVisible(false);
    typeError.setVisible(false);
}


    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        String idText = idTextField.getText().trim();
        String name = nameTextField.getText().trim();
        String location = locationTextField.getText().trim();
        String availability = availabilityTextField.getText().trim();
        String priceText = priceTextField.getText().trim();
        String portsText = portsTextField.getText().trim();
        String type = typeTextField.getText().trim();

        setClear();
        

        try {
            if (!ValidationUtil.isIdInRange(idText)) {
                errorOrNormalField(idTextField, "Station ID", idError, "Station ID Not In Range", Color.red, rootPaneCheckingEnabled);
                return;
            } else if (!ValidationUtil.isNum(idText)) {
                errorOrNormalField(idTextField, "Station ID", idError, "Station ID Must Be a Number", Color.red, rootPaneCheckingEnabled);
                return;
            }

            if (!ValidationUtil.isNameValid(name)) {
                JOptionPane.showMessageDialog(null, "Name is invalid", "Invalid Name", JOptionPane.ERROR_MESSAGE);
                errorOrNormalField(nameTextField, "Station Name", nameError, "Enter Valid Station Name", Color.red, rootPaneCheckingEnabled);
                return;
            }

            if (!ValidationUtil.isLocationValid(location)) {

                JOptionPane.showMessageDialog(null, "Location is invalid", "Invalid Location", JOptionPane.ERROR_MESSAGE);
                errorOrNormalField(locationTextField, "Location", locationError, "Enter Valid Location", Color.red, rootPaneCheckingEnabled);
                return;
            }

            if (!ValidationUtil.isAvailabilityValid(availability)) {
                JOptionPane.showMessageDialog(null, "Availability is invalid", "Invalid Availability", JOptionPane.ERROR_MESSAGE);
                errorOrNormalField(availabilityTextField, "Availability", availabilityError, "Enter Valid Availability (e.g., Available/Unavailable)", Color.red, rootPaneCheckingEnabled);
                return;
            }

            if (!ValidationUtil.isPriceValid(priceText)) {
                JOptionPane.showMessageDialog(null, "Price is invalid", "Invalid Price", JOptionPane.ERROR_MESSAGE);
                errorOrNormalField(priceTextField, "Price", priceError, "Enter Valid Price", Color.red, rootPaneCheckingEnabled);
                return;
            } else if (!ValidationUtil.isNum(priceText)) {
                errorOrNormalField(priceTextField, "Price", priceError, "Price Must Be a Number", Color.red, rootPaneCheckingEnabled);
                return;
            }
            
            if (!ValidationUtil.isNum(portsText)) {
                JOptionPane.showMessageDialog(null, "Port is invalid", "Invalid Port", JOptionPane.ERROR_MESSAGE);
                errorOrNormalField(portsTextField, "Ports", portsError, "Ports Must Be a Number", Color.red, rootPaneCheckingEnabled);
                return;
            }

            if (!ValidationUtil.isTypeValid(type)) {
                JOptionPane.showMessageDialog(null, "Type is invalid", "Invalid Type", JOptionPane.ERROR_MESSAGE);
                errorOrNormalField(typeTextField, "Type", typeError, "Enter Valid Type", Color.red, rootPaneCheckingEnabled);
                return;
            }

            for (Station station:  stationList){
                if (station.getId() == Integer.valueOf(idText)){
                errorOrNormalField(typeTextField, "Station ID", typeError, "Already Exists!", Color.red, rootPaneCheckingEnabled);
                return;
                }

            }

            Station station = new Station(
                    Integer.parseInt(idText),
                    name,
                    location,
                    availability,
                    Float.parseFloat(priceText),
                    Integer.parseInt(portsText),
                    type
            );

            stationList.add(station);

            loadListToTable(stationList);

            // setClear();

            // clearStationForm();
        } catch (NumberFormatException e) {
            System.out.println("Invalid number format: " + e.getMessage());
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void errorOrNormalField(JTextField textField, String fieldName, JLabel errorLbl, String errorMsg, Color color, boolean isError) {
        textField.setBorder(
                javax.swing.BorderFactory.createTitledBorder(
                        javax.swing.BorderFactory.createLineBorder(color, 2), fieldName, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                        javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), color));

        if (isError) {
            errorLbl.setText(errorMsg);
            errorLbl.setVisible(true);
        }

    }
    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // Get the username and password input
        String username = userTextField.getText();
        String password = new String(pwdPasswordField.getPassword());

        // Check if username or password is empty
        if (username.isEmpty() || password.isEmpty()) {
            loginErrorLabel.setText("Please enter your username and password.");
        } // Check if username and password are incorrect
        else if (!username.equals("admin") || !password.equals("admin")) {
            loginErrorLabel.setText("Username and password mismatch.");
        } // If credentials are correct, proceed to load the main screen
        else {
            loginErrorLabel.setText(""); // Clear any previous error messages
            loadScreen("MainScreen"); // Load the main screen
        }        
    }//GEN-LAST:event_loginBtnActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        pwdPasswordField.setText("");
        userTextField.setText("");
        loadScreen("LoginScreen");
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void redirectAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redirectAdminButtonActionPerformed
        jTabbedPane1.setSelectedIndex(1);       
    }//GEN-LAST:event_redirectAdminButtonActionPerformed

    private void selectionSortComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionSortComboBoxActionPerformed
        // TODO add your handling code here:
        int value = selectionSortComboBox.getSelectedIndex();
        SelectionSort selectionSort = new SelectionSort();
        List <Station> sortedList;
        if (value == 1) {
            sortedList = selectionSort.sortByStationID(stationList, false);
            loadListToTable(sortedList);

        } else if (value == 2){
            sortedList = selectionSort.sortByStationID(stationList, true);
            loadListToTable(sortedList);
        }
    }//GEN-LAST:event_selectionSortComboBoxActionPerformed

    private void insertionSortComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertionSortComboBoxActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        int value = insertionSortComboBox.getSelectedIndex();

        // Creating an instance of InsertionSort class
        InsertionSort insertionSort = new InsertionSort();

        // Sorted list to hold the result
        List<Station> sortedList;

        // Check the sorting order and sort accordingly
        if (value == 1) { // Alphabetically
            sortedList = insertionSort.sortAlphabetically(stationList);
            loadListToTable(sortedList);
        } else if (value == 2) { // Reverse Alphabetically
            sortedList = insertionSort.sortReverseAlphabetically(stationList);
            loadListToTable(sortedList);
        }
    }//GEN-LAST:event_insertionSortComboBoxActionPerformed

    private void mergeSortComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeSortComboBoxActionPerformed
        // TODO add your handling code here:
         int value = mergeSortComboBox.getSelectedIndex();

        // Creating an instance of InsertionSort class
        MergeSort mergeSort = new MergeSort();

        // Sorted list to hold the result
        List<Station> sortedList;

        // Check the sorting order and sort accordingly
        if (value == 1) { 
            sortedList = mergeSort.sortByPriceAscending(stationList);
            loadListToTable(sortedList);
        } else if (value == 2) { 
            sortedList = mergeSort.sortByPriceDescending(stationList);
            loadListToTable(sortedList);
        }
    }//GEN-LAST:event_mergeSortComboBoxActionPerformed

    private void searchBarTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBarTextFieldActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        // Retrieve the text from the search field
        String searchValue = searchBarTextField.getText().trim();
        
        BinarySearch binarySearch = new BinarySearch();
        // Perform the search and update the table
        binarySearch.searchAndUpdateTable(searchValue, stationList, 0, stationList.size() - 1, stationTable);

    }//GEN-LAST:event_searchButtonActionPerformed

    private void loadListToTable(List<Station> stationList) {
        DefaultTableModel model = (DefaultTableModel) stationTable.getModel();

        model.setRowCount(0);

        stationList.forEach(station -> model.addRow(new Object[]{
            station.getId(),
            station.getName(),
            station.getLocation(),
            station.getAvailability(),
            station.getPrice(),
            station.getPorts(),
            station.getType()
        }));
    }
    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChargeHive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChargeHive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChargeHive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChargeHive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        ChargeHive app = new ChargeHive();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChargeHive().setVisible(true);
            }
        });
        app.startProgress();    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel aboutUsTabPanel;
    private javax.swing.JButton addButton;
    private javax.swing.JPanel adminTabPanel;
    private javax.swing.JTextField availabilityTextField;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel headingLabel;
    private javax.swing.JPanel homeTabPanel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JComboBox<String> insertionSortComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JLabel loadScreenIcon;
    private javax.swing.JLabel loadScreenLabel;
    private javax.swing.JProgressBar loadScreenProgress;
    private javax.swing.JPanel loadingScreenPanel;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JButton loginBtn;
    private javax.swing.JLabel loginErrorLabel;
    private javax.swing.JLabel loginImageLabel;
    private javax.swing.JPanel loginScreenPanel;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPanel mainScreenPanel;
    private javax.swing.JComboBox<String> mergeSortComboBox;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField portsTextField;
    private javax.swing.JTextField priceTextField;
    private javax.swing.JLabel progLabel;
    private javax.swing.JLabel pwdLabel;
    private javax.swing.JPasswordField pwdPasswordField;
    private javax.swing.JButton redirectAdminButton;
    private javax.swing.JTextField searchBarTextField;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> selectionSortComboBox;
    private javax.swing.JTable stationTable;
    private javax.swing.JPanel topBarPanel;
    private javax.swing.JTextField typeTextField;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userTextField;
    // End of variables declaration//GEN-END:variables
}
